import Head from "next/head";
import axios from "axios";
import { useRef, useState } from "react";
import { Formik, Form, Field } from "formik";
import {
	Button,
	FormControl,
	FormLabel,
	FormErrorMessage,
	Input,
	Box,
	useColorMode,
	IconButton,
	Heading,
	Flex,
	Text,
} from "@chakra-ui/react";
import { MoonIcon, SunIcon } from "@chakra-ui/icons";

const Home = () => {
	const inputRef = useRef();

	const { colorMode, toggleColorMode } = useColorMode();
	const [response, setResponse] = useState();

	const handleSubmit = async () => {
		axios
			.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/chat`, {
				question: inputRef.current.value,
			})
			.then(function (response) {
				setResponse(response.data.answer);
				console.log(response.data.answer);
			})
			.catch(function (error) {
				console.log(error);
				setResponse(error);
			});
	};

	const validateName = (value) => {
		let error;
		if (!value) {
			error = "Message is required";
		}
		return error;
	};

	return (
		<>
			<Head>
				<title>Chatbot</title>
				<meta name="description" content="Chat with me" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Flex
				height="100vh"
				justifyContent="center"
				direction="column"
				textAlign="center"
				alignItems="center"
			>
				<Head>
					<title>Chatbot</title>
					<meta name="description" content="Generated by create next app" />
					<link rel="icon" href="/favicon.ico" />
				</Head>

				<Flex
					height="40%"
					as="main"
					justifyContent="space-around"
					direction="column"
					textAlign="center"
					alignItems="center"
					width="80%"
				>
					<Box>
						<Heading as="h1" size="2xl">
							Chat Bot
						</Heading>
						<Text fontSize="xl">Get started by typping in the box below</Text>
					</Box>

					<Box my={50}>
						<Formik
							initialValues={{ name: "Hey" }}
							onSubmit={(_values, actions) => {
								handleSubmit();
								actions.setSubmitting(false);
							}}
						>
							{(props) => (
								<Form>
									<Field name="name" validate={validateName}>
										{({ field, form }) => (
											<FormControl
												isInvalid={form.errors.name && form.touched.name}
											>
												<FormLabel htmlFor="text">Message</FormLabel>
												<Input
													{...field}
													id="text"
													placeholder="name"
													ref={inputRef}
													width={{ base: "100%", lg: 400, xl: 400 }}
												/>
												<FormErrorMessage>{form.errors.name}</FormErrorMessage>
											</FormControl>
										)}
									</Field>
									<Button
										mt={4}
										colorScheme="teal"
										isLoading={props.isSubmitting}
										type="submit"
									>
										Submit
									</Button>
								</Form>
							)}
						</Formik>
					</Box>
					<Box mx={10}>
						<Text
							fontSize="xl"
							textOverflow="wrap"
							style={{ opacity: response ? 100 : 0 }}
						>{`Response : ${response}`}</Text>
					</Box>
				</Flex>
			</Flex>
			<Box>
				<IconButton
					position="fixed"
					top={{ base: 10, lg: 5, xl: 20 }}
					right={{ base: 10, lg: 5, xl: 20 }}
					variant="nooutline"
					colorScheme="teal"
					aria-label="Toggle Light Mode"
					icon={colorMode == "light" ? <MoonIcon /> : <SunIcon />}
					onClick={toggleColorMode}
				/>
			</Box>
		</>
	);
};

export default Home;
